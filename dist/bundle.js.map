{"version":3,"file":"bundle.js","sources":["webpack:///webpack/bootstrap","webpack:///./src/components/AddAct.js","webpack:///./src/components/app.js","webpack:///./src/components/forgot.js","webpack:///./src/components/login.js","webpack:///./src/components/register.js","webpack:///./src/components/reset.js","webpack:///./src/components/userdash.js","webpack:///./src/components/util/actlist.js","webpack:///./src/components/util/alert.js","webpack:///./src/components/util/chart.js","webpack:///./src/components/util/churchlist.js","webpack:///./src/components/util/filterList.js","webpack:///./src/components/util/isEmpty.js","webpack:///./src/components/util/navbar.js","webpack:///./src/css/addact.css?ba0a","webpack:///./src/css/app.css?1f60","webpack:///./src/css/churchlist.css?b909","webpack:///./src/css/images/Spin-1.8s-200px.gif","webpack:///./src/css/login.css?c0f3","webpack:///./src/css/navbar.css?5345","webpack:///./src/css/register.css?7732","webpack:///./src/css/userdash.css?302b","webpack:///./src/index.js","webpack:///./src/redux/actions/actActions.js","webpack:///./src/redux/actions/appActions.js","webpack:///./src/redux/actions/constants.js","webpack:///./src/redux/actions/forgotActions.js","webpack:///./src/redux/actions/loginActions.js","webpack:///./src/redux/actions/userdashActions.js","webpack:///./src/redux/reducers/actReducer.js","webpack:///./src/redux/reducers/appReducer.js","webpack:///./src/redux/reducers/authReducer.js","webpack:///./src/redux/reducers/churchlistReducer.js","webpack:///./src/redux/reducers/errorReducer.js","webpack:///./src/redux/reducers/forgotReducer.js","webpack:///./src/redux/reducers/loginReducer.js","webpack:///./src/redux/reducers/rootreducer.js","webpack:///./src/redux/reducers/userdashReducer.js","webpack:///./src/redux/reducers/userlistReducer.js","webpack:///./src/redux/reducers/visibilityReducer.js","webpack:///./src/redux/reduxUtils/setAuthToken.js"],"sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"main\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./src/index.js\",\"vendors~main\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import React, { Component , Fragment} from 'react';\nimport {FormControl, FormGroup, Radio, Button, Modal} from 'react-bootstrap';\nimport NavBar from '../components/util/navbar';\nimport Alert from '../components/util/alert';\nimport { Redirect } from 'react-router-dom';\n\nimport {sendActToDB} from '../redux/actions/actActions';\nimport { connect } from 'react-redux';\n\nimport '../css/addact.css';\nimport { bindActionCreators } from 'redux';\n\n\nclass AddAct extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      text:'',\n      actType:'',\n      show: false,\n      charsleft: 100,\n      showAlert: false,\n    };\n    this.handleHide = this.handleHide.bind(this);\n  }\n\n  toggleModal = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n    \n  handleTypeChange = (event) => {\n    this.setState({actType: event.target.value })\n  }\n\n\n  handleTextChange = (event) => {\n    let input = event.target.value\n    this.setState({text: event.target.value})\n    this.setState({ charsleft: 100 - input.length})\n  }\n\n  handleHide() {\n    this.setState({ show: false });\n  }\n\n  handleSubmit = () => {   \n     const actdata = {\n      description: this.state.text,\n      typeofact: this.state.actType,\n      userid: this.props.auth.user._id\n     }\n     //send to database now\n     this.props.sendActToDB(actdata)\n     this.handleHide();\n     this.setState({text:''})\n     this.setState({actType:''})\n     this.setState({showAlert: true})\n  }\n\n  getValidationState = () => {\n    const textlength = this.state.text.length;\n    if(textlength >= 100)  return 'error';\n    else if (textlength >= 15) return 'success';\n    return null\n  }\n\n  showAlert = () => {\n    if(!this.state.showAlert) {\n        return <div></div>\n      }\n    \n    else {\n      \n      return(\n      <div className='alertdiv'>\n      <Alert />    \n      </div>\n      )    \n      \n    }\n  }\n\n  render() {    \n    if(!this.props.auth.isAuthenticated){\n      return <Redirect to='/login' />\n  }\n    const { text, actType} = this.state;\n    const isEnabled = text.length > 15 && actType.length > 0;\n\n    return (  \n      <Fragment>\n\n        <NavBar />\n            {this.showAlert()}\n              \n            <form >\n                <h1 className='message1 words'> I commited an act of... </h1>\n\n                  <FormGroup className='radioButtonGroup'>\n                    <Radio inline value=\"Witness\" onChange={this.handleTypeChange} name='radioButtonGroup'>Witness</Radio>\n                    <Radio inline value=\"Kindness\" onChange={this.handleTypeChange} name='radioButtonGroup'>Kindness</Radio>\n                    <Radio inline value=\"Encouragement\" onChange={this.handleTypeChange}  name='radioButtonGroup'>Encouragement</Radio>\n                  </FormGroup>\n\n                <h2 className='message3 words'>by</h2>       \n             \n                <div >\n                <FormGroup controlId=\"formBasicText\" validationState={this.getValidationState()}>\n                  <FormControl \n                  maxLength=\"100\"\n                  className='explainarea' \n                  bsSize=\"large\" componentClass=\"textarea\" \n                  placeholder=\"Explain you act...\" \n                  value={this.state.text}\n                  onChange={this.handleTextChange}  \n                             \n                  /> \n                  <p>{this.state.charsleft} /100</p>\n                 </FormGroup>     \n              </div>\n              \n                    <div className=\"modal-container\" style={{ height: 200 }}>\n          <Button\n            disabled = {!isEnabled}\n            className='submitbutton'\n            bsStyle=\"primary\"\n            bsSize=\"large\"\n            onClick={() => this.setState({ show: true })}\n          >\n           Submit\n          </Button>\n  \n          <Modal\n            show={this.state.show}\n            onHide={this.handleHide}\n            container={this}\n            aria-labelledby=\"contained-modal-title\"\n          >\n            <Modal.Header closeButton>\n            </Modal.Header>\n            <Modal.Body>\n              Are you sure you want to submit? <br />\n              You act will be shared with the entire church.\n            </Modal.Body>\n            <Modal.Footer>\n              <Button type=\"button\" onClick={this.handleSubmit}>Submit</Button>\n              <Button onClick={this.handleHide}>Cancel</Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n              </form>\n\n      </Fragment>\n    );\n  }\n\n}\n\nfunction mapDispatchToProps (dispatch) {\n  return bindActionCreators ({sendActToDB}, dispatch)\n}\n\nconst mapStateToProps = state => {\n    return {\n      auth: state.auth,\n      act: state.act\n    }\n}\n\n// export default AddAct;\nexport default connect(mapStateToProps, mapDispatchToProps)(AddAct);","import React, { Component, Fragment } from 'react';\nimport NavBar from '../components/util/navbar';\nimport Chart from './util/chart';\nimport ChurchList from './util/churchlist'\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { getAllPoints, getAllActs } from '../redux/actions/appActions';\nimport '../css/app.css';\nimport { bindActionCreators } from 'redux';\n\n\nexport class App extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedin: this.props.auth.isAuthenticated\n        }\n    \n    }\n    \n\n    componentDidMount() {   \n        this.props.getAllPoints();\n        this.props.getAllActs();     \n        }\n\n\n    render() {\n        if(!this.props.auth.isAuthenticated){\n            return <Redirect to='/login' />\n        }\n        return(\n            <Fragment>\n            <NavBar/>\n            <div className=\"app-wrapper\">\n                \n                <div className='headersection'>                   \n                    <div className='totalactsmessage'>Acts completed:{this.props.points.points}</div>\n                    <div className='smallmessage'>Acts: {this.props.points.points}</div>\n                </div>\n               \n                <div className='data'>\n                    <div className='d3'>\n                    <Chart className=\"chartwidth\" chartData={this.props.points} />\n                    </div>\n                \n                </div>\n                <div className='mainsection'>\n                    <ChurchList allacts={this.props.churchlist} isLoading={this.props.isLoading} />\n                </div>\n        \n            </div>\n            </Fragment>\n        )\n    }\n\n}\n\nfunction mapDispathToProps(dispatch) {\n    return bindActionCreators({ getAllPoints, getAllActs}, dispatch)\n}\n\n\n\nconst mapStateToProps  = state => \n{ \n    return {\n        points: state.app,\n        churchlist: state.churchlist.churchlist,\n        isLoading: state.churchlist.isLoading,\n        auth: state.auth\n    }\n}\n\nexport default connect (mapStateToProps, mapDispathToProps) (App);","import React, { Component,Fragment } from 'react';\nimport {FormControl, FormGroup, Button} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\nimport { connect} from 'react-redux';\nimport { Alert } from 'react-bootstrap';\nimport { resetPassword } from '.././redux/actions/forgotActions'\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport '../css/register.css'\n\nclass Forgot extends Component {\n\n    state = {   \n        email: '',\n        errors: {},\n        forgot: {},\n        showAlert: false,\n    }\n\n\n    handleEmailChange = (event) => {\n\n        this.setState({email: event.target.value})\n    }\n\n\n    handleSubmit = e => {\n        e.preventDefault();       \n        const sendtoemail = {\n            email: this.state.email,          \n        }\n        this.props.resetPassword(sendtoemail);\n    }\n\n    showAlert = () => {\n        if(this.state.showAlert) {\n            return <div>\n                  <Alert className=\"invalid-feedback alert-success\">\n                     {this.state.forgot && (<div className=\" alert-success\">{this.state.forgot.email}</div>)}\n                  </Alert>\n            </div>\n          }       \n       \n      }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n                \n            });\n        }\n        if(nextProps.forgot) {\n            this.setState({forgot:nextProps.forgot})\n            this.setState({showAlert: true})\n            this.setState({errors: {}})\n        }\n    }\n    render() {\n        const { errors, forgot } = this.state;\n\n        return(\n            <Fragment>\n            <div className=\"register-wrapper\"> \n                \n                <form size='large' className=\"registerForm\" onSubmit={this.handleSubmit}>\n                    {this.showAlert()}\n\n                    <FormGroup>\n                        <label>Enter Email Address</label>\n                            <FormControl\n                            placeholder='user@myemail.com'\n                            type='email'\n                            name=\"email\"\n                            autoFocus\n                            onChange={this.handleEmailChange}\n                            value={this.state.email}\n                            className={classnames('form-control form-control-lg  ', {'is-invalid': errors.email, 'valid': forgot.email})}\n                        />\n                             {errors.email && (<div className=\"invalid-feedback alert-danger\">{errors.email}</div>)}\n                        \n                    </FormGroup>\n\n                    <div className='regbutton'>\n                        <Button bsStyle='primary' type='submit'>Send</Button>\n                    </div>  \n\n                    <div className='rglink'>\n                        <Link to ={'/login'} >\n                            <p>Registered? Login Here.</p> \n                        </Link>\n                    </div>\n                </form>   \n            </div>\n            </Fragment>\n        )\n    }\n}\n\nForgot.propTypes = {\n    resetPassword: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => (\n    {\n    \n    errors: state.errors,\n    forgot: state.forgot.data\n});\n\n\nexport default connect(mapStateToProps, {resetPassword}) (Forgot);","import React, { Component } from 'react';\nimport {FormControl, FormGroup, Button} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\nimport {loginUser} from '../redux/actions/loginActions';\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport spinner from '../css/images/Spin-1.8s-200px.gif'\nimport '../css/login.css'\n\nclass Login extends Component {\n  \n         state = {\n            email: '',\n            password: '',\n            submitted: false,\n            errors: {\n                errors:{}\n            }\n    }\n\n    handleChange = event => {\n        this.setState({email: event.target.value})\n    }\n\n    handlePasswordChange = event => {\n        this.setState({password: event.target.value})\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        this.setState({submitted: true})\n        \n        const user = {\n            email: this.state.email,\n            password: this.state.password\n        }\n        this.props.loginUser(user);\n        \n    }\n\n    componentDidMount() {\n        if(this.props.auth.isAuthenticated) {\n            this.props.history.push('/');\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.auth.isAuthenticated) {\n            this.props.history.push('/')\n        }\n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n\n    render() {\n\n        // setting up input validation\n        const { errors } = this.state;\n\n        if(this.props.loggingIn === 'true') {\n            return <div className='spinner'>\n                    <img src={spinner} className='gif' alt='loading gif'/>\n                    <p>Logging In...</p>\n                    </div>\n        }\n\n        return(\n        \n            <div className='loginwrapper'>      \n                <form size='large' className='loginform' onSubmit={this.handleSubmit}>\n                    \n                    <h1>ChurchApp</h1>\n\n                    <FormGroup>\n                    <label>Email</label>\n                    <FormControl \n                        placeholder='email' \n                        type='email'\n                        onChange={this.handleChange}\n                        value={this.state.email}  \n                        className={classnames('form-control form-control-lg', {'is-invalid': errors.email })}\n                    />\n                    {errors.email && (<div className=\"invalid-feedback alert-danger\">{errors.email}</div>)}\n                    </FormGroup>\n                    \n                    <FormGroup>\n                    <label>Password</label>\n                    <FormControl placeholder='password'\n                        type='password'\n                        onChange={this.handlePasswordChange}\n                        value={this.state.password}\n                        className={classnames('form-control form-control-lg', {'is-invalid': errors.password})} \n                    />\n                    {errors.password && (<div className=\"invalid-feedback alert-danger\">{errors.password}</div>)}\n                    </FormGroup>\n\n                    <div className='loginbutton'>\n                    <Button  bsStyle='success' type='submit' >Login</Button>\n                    </div>\n\n                    <div className='link'>\n                    <Link to ='/register'> \n                    <p>Not signed up? Click here to Register.</p>\n\n                    </Link>\n\n                    <Link to ='/forgot'> \n                    <p>Forgot password. Click here to reset</p>\n\n                    </Link>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    loginUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => {\n        return { \n            user: state, \n            auth: state.auth,\n            errors: state.errors.errors,\n            loggingIn: state.errors.loggingIn\n            }\n}\n\nexport default connect (mapStateToProps, {loginUser}) (Login);","import React, { Component } from 'react';\nimport {FormControl, FormGroup, Button} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\nimport { connect} from 'react-redux';\nimport { registerUser } from '.././redux/actions/loginActions'\nimport { withRouter } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport  spinner from '../css/images/Spin-1.8s-200px.gif'\nimport '../css/register.css'\n\n\nclass Register extends Component {\n\n    state = {\n        fullname: '',\n        email: '',\n        password: '',\n        password_confirm:'',\n        errors: {\n            errors: {}\n        }\n    }\n\n\n    handleFullnameChange = (event) => {\n\n        this.setState({fullname: event.target.value})\n    }\n\n    handleEmailChange = (event) => {\n\n        this.setState({email: event.target.value})\n    }\n\n    handlePasswordChange = (event) => {\n\n        this.setState({password: event.target.value})\n    }\n\n    handleConfirmChange = (event) => {\n\n        this.setState({password_confirm: event.target.value})\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        const user = {\n            fullname: this.state.fullname,\n            email: this.state.email,\n            password: this.state.password,\n            password_confirm: this.state.password\n            \n        }\n        this.props.registerUser(user, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n\n    render() {\n                \n        const {fullname, email, password, password_confirm, errors } = this.state;\n        const isEnabled = fullname.length > 3 && email.length > 0 && password === \n        password_confirm;\n\n        if(this.props.isFetching) {\n            return <div className='spinner'>\n                    <img src={spinner} className='gif' alt='registering gif'/>\n                    <p>Getting you Registered...</p>\n                    </div>\n        }\n\n        return(\n       <div className=\"register-wrapper\">\n     \n                <form size='large' className=\"registerForm\" onSubmit={this.handleSubmit }>\n                    <FormGroup>\n                    <label>Enter Full Name</label>\n\n                        <FormControl\n                        placeholder='John Doe'\n                        type='fullname'\n                        onChange={this.handleFullnameChange}\n                        value={this.state.fullname}\n                        className={classnames('form-control form-control-lg', {'is-invalid': errors.fullname})}\n                      \n                        />\n                        {errors.name && (<div className=\"invalid-feedback alert-danger\">{errors.fullname}</div>)}\n                    </FormGroup>\n\n                      <FormGroup>\n                    <label>Enter Email Address</label>\n\n                        <FormControl\n                        placeholder='user@myemail.com'\n                        type='email'\n                        name=\"email\"\n                        onChange={this.handleEmailChange}\n                        value={this.state.email}\n                        className={classnames('form-control form-control-lg  ', {'is-invalid': errors.email})}\n                        />\n                        {errors.email && (<div className=\"invalid-feedback alert-danger\">{errors.email}</div>)}\n                    </FormGroup>\n\n                    <FormGroup>\n                    <label>Password</label>\n                    <FormControl placeholder='password'\n                        name='password_confirm'\n                        value={this.state.password}\n                        onChange={this.handlePasswordChange}\n                        type='password'\n                        className={classnames('form-control form-control-lg', {\n                            'is-invalid': errors.password\n                        })}\n                \n                        />\n                        {errors.password && (<div className=\"invalid-feedback alert-danger\">{errors.password}</div>)}\n                    </FormGroup>\n\n                     <FormGroup>\n                    <label>Confirm Password</label>\n                    <FormControl placeholder='password'\n                        type='password'\n                        name='password_confirm'\n                        onChange={this.handleConfirmChange}\n                        value={this.state.password_confirm}\n                        className={classnames('form-control form-control-lg', {\n                            'is-invalid': errors.password_confirm\n                        })}\n                        />\n                        {errors.password_confirm && (<div className=\"invalid-feedback alert-danger\">{errors.password_confirm}</div>)}\n                    </FormGroup>\n\n                     <div className='regbutton'>\n                    <Button disabled={!isEnabled} bsStyle='success' type='submit'>Register</Button>\n                    </div>  \n\n                     <div className='rglink'>\n                        <Link to ={'/login'} >\n                            <p>Registered?\n                                 Login Here.</p> \n                        </Link>\n                    </div>\n                </form>   \n        </div>\n\n        )\n    }\n}\n\nRegister.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors.errors,\n    isFetching: state.errors.isFetching\n});\n\n\nexport default connect(mapStateToProps, {registerUser})(withRouter (Register));","import React, { Component } from 'react';\nimport {FormControl, FormGroup, Button, HelpBlock} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\nimport { Alert } from 'react-bootstrap';\n\nimport {connect} from 'react-redux'\nimport '../css/register.css'\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { setNewPassword } from '../redux/actions/forgotActions'\n\nclass Reset extends Component {\n\n         state = {\n            password: '',\n            confirm_password: '',\n            submitted: false,\n            showAlert: false,\n            errors: {},\n            forgot: {}\n    }\n\n    handlePasswordChange = event => {\n        this.setState({password: event.target.value})\n    }\n\n    handleChange = event => {\n        this.setState({confirm_password: event.target.value})\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        this.setState({submitted: true})\n        \n\n        const userData = {\n            newPassword: this.state.password,\n            resetToken: this.props.location.pathname.slice(7,47),\n        }\n        this.props.setNewPassword(userData);\n        \n    }\n\n    showAlert = () => {\n        if(this.state.showAlert) {\n            return <div>\n                  <Alert className=\"invalid-feedback alert-success\">\n                     {this.state.forgot && (<div className=\" alert-success\">{this.state.forgot.message}</div>)}\n                  </Alert>\n            </div>\n          }       \n       \n      }\n\n    getValidationState() {\n        const length = this.state.password.length;\n        if (length > 7) return 'success';\n        else if (length > 0) return 'error';\n        return null;\n      }\n\n      confirmGetValidationState() {\n        if (this.state.confirm_password.length > 0 && this.state.password === this.state.confirm_password) return 'success';           \n        else if(this.state.confirm_password.length > 0)  {return 'error'};\n        return null;\n      }\n\n\n    componentWillReceiveProps(nextProps) {\n       \n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n        if(nextProps.forgot) {\n            this.setState({forgot:nextProps.forgot})\n            this.setState({showAlert: true})\n            this.setState({errors: {}})\n        }\n    }\n\n    render() {\n      \n        const { password, confirm_password, errors } = this.state;\n        const isEnabled = password === confirm_password && password.length > 0 && confirm_password.length > 0;\n\n        return(\n        \n            <div className='loginwrapper'>\n            \n                <form size='large' className='registerForm' onSubmit={this.handleSubmit}>\n                    {this.showAlert()}\n                    \n                    <h1>Reset Password</h1>                  \n                    \n                    <FormGroup\n                    controlId=\"formBasicText\"\n                    validationState={this.getValidationState()}\n                    >\n                    <label>Password</label>\n                    <FormControl placeholder='password'\n                        type='password'\n                        onChange={this.handlePasswordChange}\n                        value={this.state.password}\n                        className={classnames('form-control form-control-lg', {\n                            'is-invalid': errors.password\n                        })} \n                    />\n                    {errors.password && (<div className=\"invalid-feedback alert-danger\">{errors.password}</div>)}\n                    <FormControl.Feedback />\n                    <HelpBlock>Password must be at least 8 characters.</HelpBlock>\n                    </FormGroup>\n\n                      <FormGroup\n                      controlId=\"formBasicText2\"\n                      validationState={this.confirmGetValidationState()}\n                      >\n                    <label>Confirm Password</label>\n                    <FormControl placeholder='confirm password...'\n                        type='password'\n                        onChange={this.handleChange}\n                        value={this.state.confirm_password}\n                        className={classnames('form-control form-control-lg', {\n                            'is-invalid': errors.password\n                        })} \n                    />\n                    {errors.password && (<div className=\"invalid-feedback alert-danger\">{errors.password}</div>)}\n                    <FormControl.Feedback />\n\n                    </FormGroup>\n\n                    <div className='loginbutton'>\n                    <Button disabled={!isEnabled} bsStyle='primary' type='submit'>Reset</Button>\n                    </div>\n\n                    <div className='rglink'>\n                        <Link to ={'/login'} >\n                            <p>Login Here.</p> \n                        </Link>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nReset.propTypes = {\n    setNewPassword: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => {\n        return { \n            // user: state, \n            // auth: state.auth,\n            errors: state.errors,\n            forgot: state.forgot.data\n            }\n}\n\nexport default connect (mapStateToProps, {setNewPassword}) (Reset);","import React, { Component, Fragment } from 'react'\nimport ActList from '../components/util/actlist'\nimport NavBar from '../components/util/navbar'\nimport { Redirect } from 'react-router-dom';\n\nimport { bindActionCreators } from 'redux';\nimport { getUserPoints, getActList, addFilterType, removeFilterType } from '../redux/actions/userdashActions';\nimport {FormGroup, Checkbox} from 'react-bootstrap';\n\nimport { connect } from 'react-redux';\n\nimport '../css/userdash.css';\n\n class UserDash extends Component {\n\n\n    componentDidMount(){\n\n        this.props.getUserPoints(this.props.auth.user._id);\n        this.props.getActList(this.props.auth.user._id);\n    }\n\n    componentWillReceiveProps(props) {\n\n        let newarray = props.userlist\n        this.setState({ useracts: newarray})\n    }\n\n    handleTypeFilter =(event) => {\n      let priceType = event.target.value\n      if(event.target.checked) {\n          this.props.addFilterType(priceType)\n      }\n      else {\n          this.props.removeFilterType(priceType)\n      }\n\n    }\n\n    handleKindnessFilter =(event) => {\n        let kindness = event.target.value\n        if(event.target.checked) {\n            this.props.addFilterType(kindness)\n        }\n        else {\n            this.props.removeFilterType(kindness)\n        }\n  \n      }\n\n    handleEncouragementFilter =(event) => {\n        let encouragement = event.target.value\n        if(event.target.checked) {\n            this.props.addFilterType(encouragement)\n        }\n        else {\n            this.props.removeFilterType(encouragement)\n        }\n  \n      }\n\n   \n  render() {    \n\n    if(!this.props.auth.isAuthenticated){\n        return <Redirect to='/login' />\n    }\n\n    return (\n                <Fragment>\n                \n                <NavBar />\n\n                <div className='mobilesidebar'>\n                <FormGroup className='checkboxes' >\n                                <Checkbox inline value='Witness' onClick={ (e) => this.handleTypeFilter(e)} className='check' name='filterButtonGroup' >Witness</Checkbox> \n                                <Checkbox inline value='Kindness'  onClick={ (e) => this.handleKindnessFilter(e)} className='check' name='filterButtonGroup' >Kindness</Checkbox>\n                                <Checkbox inline value='Encouragement' onClick={ (e) => this.handleEncouragementFilter(e)} className='check'name='filterButtonGroup' >Encouragement</Checkbox>\n                             </FormGroup>\n                </div>\n\n\n                \n                <div className='wrapper'>\n                    <div className='header'> \n                        \n                        <h1 className='desktopMessage'>{this.props.auth.user.fullname}, you've commited {this.props.userpoints.userpoints} Acts!</h1>\n                        <h1 className='mobileMessage'>Acts: {this.props.userpoints.userpoints}</h1>\n                      \n                    </div>\n\n                    <div className='sidebar'>\n                            <FormGroup className='checkboxes' >\n                                <Checkbox value='Witness' onClick={ (e) => this.handleTypeFilter(e)} className='check' name='filterButtonGroup' >Witness</Checkbox> \n                                <Checkbox value='Kindness'  onClick={ (e) => this.handleKindnessFilter(e)} className='check' name='filterButtonGroup' >Kindness</Checkbox>\n                                <Checkbox value='Encouragement' onClick={ (e) => this.handleEncouragementFilter(e)} className='check'name='filterButtonGroup' >Encouragement</Checkbox>\n                             </FormGroup>\n                    </div>\n\n                    <div className='main'>\n                        \n                        <ActList  showFiltertedActs={this.props.showFiltertedActs}/>\n\n   \n                    </div>\n\n                </div>\n         </Fragment>\n    )\n  }\n}\n\n\nfunction mapDispatchToProps (dispatch) {\n    return bindActionCreators({getUserPoints, getActList, addFilterType, removeFilterType }, dispatch)\n} \n\n\nconst mapStatetoProps = state => {\n    return {\n        auth: state.auth,\n        userpoints: state.userdash,\n        userlist: state.userlist,\n        filters: state.filters,\n        \n    }\n}\n\nexport default connect (mapStatetoProps, mapDispatchToProps)(UserDash);","import React, { Component } from 'react';\nimport { ListGroup, ListGroupItem } from 'react-bootstrap'\n\n\n\nclass Actlist extends Component {\n    render() {\n\n        return(\n            <div className='thelist'>\n                 <ListGroup className='actlist'>\n                 {\n                            this.props.showFiltertedActs && this.props.showFiltertedActs.map( list => {\n                            return (\n                                <ListGroupItem href=\"#\" key={list._id}>{list.description}</ListGroupItem>\n                            )\n                        })\n\n                 }\n                    \n                </ListGroup>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Actlist;","import React, { Component } from 'react';\nimport { Alert } from 'react-bootstrap';\n\n\nclass AlertMessage extends Component {\n\n  \n    render() {\n        return (\n            <Alert bsStyle=\"success\">\n              <strong>Awesome!</strong> Your act has been recorded!\n            </Alert>\n        );\n      }\n  \n    \n  }\n  \n  export default AlertMessage;","import React, { Component } from 'react';\nimport {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts'\n\n\nclass Chart extends Component {\n    \n    render() {\n\n      const data = [\n        {name: 'Acts', value: this.props.chartData.points[0]},\n    \n  ];\n      return (\n        <div>\n          \t<BarChart width={350} height={500} data={data}\n            margin={{top: 5, right: 30, left: 20, bottom: 5}}>\n       <CartesianGrid strokeDasharray=\"3 3\"/>\n       <XAxis dataKey=\"name\"/>\n       <YAxis type='number' domain={[ 0, 100]}/>\n       <Tooltip/>\n       <Bar dataKey=\"value\" fill=\"#82ca9d\" />\n      </BarChart>\n        </div>\n      );\n    }\n  };\n\nexport default Chart;","import React, { Component } from 'react';\nimport '../../css/churchlist.css';\n\nclass ChurchList extends Component {\n\n        state = { \n           acts: [],\n           text:'',\n           name: '',\n         }\n \n    componentWillReceiveProps(props) {\n        let newarray = props.allacts && props.allacts.map( randomuser => {\n            return randomuser;\n            }).filter( filteredlist => {\n                return filteredlist.acts.length > 0\n            })\n                  \n        this.setState({ acts: newarray })\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n      }\n\n    componentDidMount() {\n        this.timerID = setInterval(() => {\n            this.renderSlideShow()\n        },5000)\n    }\n  \n    renderSlideShow = () => {\n        if(this.state.acts && this.state.acts.length == 0) {\n            return <div></div>\n        }\n        else {\n\n            let user = this.state.acts[Math.floor(Math.random() * this.state.acts.length)];\n            \n            let wordsArray = [];\n            \n            user.useracts.map( words => {\n                    wordsArray.push(words.description)\n                    return words\n                });\n            let screenword = wordsArray[Math.floor(Math.random() * wordsArray.length)]\n                    \n            this.setState({text: screenword});\n            this.setState({name: user.fullname});\n           \n        }\n    }\n    \n    render() {\n\n            if(this.props.isLoading) {\n                return <p>Loading...</p>\n            }\n\n        return(\n            <div className='quote-wrapper'>\n           \n                <div className='listquote'>\n                    {this.state.text}  \n                </div>\n                <p className='person'>{this.state.name} </p>\n            </div>\n        )\n    }\n}\n\nexport default ChurchList;","import React, { Component } from 'react';\nimport { connect} from 'react-redux';\nimport UserDash from '../userdash';\n\n\nconst getVisibleActs = (acts, filter) => {\n  \n    //show all acts\n    if(filter.typeFilter.length === 0) {\n        return acts.userlist;\n    }\n    //show only witness\n    else if (filter.typeFilter.length !== 0) {\n\n        let filteredArray = []\n\n        acts.userlist.forEach( w => {\n\n            if(filter.typeFilter.indexOf(w.typeofact) !== -1){\n                filteredArray.push(w)\n            }\n        })\n        return filteredArray\n    } \n    \n   \n    \n}\n\nexport class VisableActList extends Component {\n    render() {\n        let showFiltertedActs = getVisibleActs(this.props.userlist, this.props.visableFilter)\n\n        return (\n            <div className='visiable-act-list'>\n                <UserDash showFiltertedActs={showFiltertedActs}/>\n            </div>\n        )\n    }\n\n}\n\nconst mapsStateToProps = (state) => {\n    return {\n        visableFilter: state.visableFilter,\n        userlist: state.userlist\n    }\n}\n\nexport default connect(mapsStateToProps, null) (VisableActList)\n","\nconst isEmpty = (value) => {\n    return (\n        value === undefined ||\n        value === null ||\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\n        (typeof value === 'string' && value.trim().length === 0)\n    );\n}\nexport default isEmpty;","\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {Nav, Navbar } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport { logoutUser } from '../../redux/actions/loginActions'\nimport { connect } from 'react-redux';\n\nimport '../../css/navbar.css';\n\n export class NavBarItem extends Component {\n\n    onLogout = event => {\n        this.props.logoutUser(this.props.history)\n    }\n\n    render() {\n        return(\n\n    <Navbar  inverse collapseOnSelect>\n        <Navbar.Header >\n          <Navbar.Brand>\n            <Link to='/'>ChurchApp</Link>\n         </Navbar.Brand>\n            <Navbar.Toggle />\n        </Navbar.Header>\n  <Navbar.Collapse>\n   \n    <Nav  pullRight>\n\n        <Navbar.Brand>\n            <Link to='/userdash' className='bootstraplink'>MyActs</Link>\n         </Navbar.Brand>\n\n         <Navbar.Brand>\n            <Link to='/addact' className='bootstraplink'>AddAct</Link>\n         </Navbar.Brand>\n\n         <Navbar.Brand>\n            <Link to='#' className='bootstraplink'onClick={this.onLogout}>Logout</Link>\n         </Navbar.Brand>\n     \n    </Nav>\n  </Navbar.Collapse>\n</Navbar>\n\n\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.auth,\n        user: state.user\n    }\n}\n\n\nexport default connect(mapStateToProps, {logoutUser}) (withRouter(NavBarItem)); \n\n\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","module.exports = __webpack_public_path__ + \"41c7e61943934487cf490d38b3901040.gif\";","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import '@babel/polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./components/app\";\nimport AddAct from './components/AddAct';\nimport Login from './components/login';\nimport Register from './components/register'\nimport Filter from './components/util/filterList';\nimport Forgot from './components/forgot';\nimport Reset from './components/reset';\nimport { BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './redux/reducers/rootreducer';\nimport setAuthToken from './redux/reduxUtils/setAuthToken';\nimport { setCurrentUser } from './redux/actions/loginActions';\nimport jwt_decode from 'jwt-decode';\n\nconst middleware = applyMiddleware(thunk);\nconst initialState = {}\n\nlet devTools = window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__();\nif (process.env.NODE_ENV === 'prod' || process.env.NODE_ENV === 'production') {\n    devTools = a => a;\n}\n\n\nconst store = createStore(\n    rootReducer, \n    initialState,\n    compose(\n        middleware,\n        devTools\n        ));\n\nif(localStorage.jwtToken) {\n    setAuthToken(localStorage.jwtToken);\n    const decoded = jwt_decode(localStorage.jwtToken);\n    store.dispatch(setCurrentUser(decoded));\n}\n\nReactDOM.render(\n<Provider store={store}>\n    <BrowserRouter>\n        <Switch>\n            <Route exact path='/' component={App} />\n            <Route path='/addact' component={AddAct}/>\n            <Route path='/login' component={Login}/>\n            <Route path='/register' component={Register}/>\n            <Route path='/userdash' component={Filter}/>\n            <Route path='/forgot' component={Forgot}/>\n            <Route path='/reset' component={Reset}/>\n        </Switch>\n    </BrowserRouter>\n</Provider>, document.getElementById('root'));\n\n","import axios from 'axios';\nimport { POST_ACT_SUCCESS, POST_ACT_FAILURE } from './constants';\n\nconst API_URL = process.env.API_URL || \"http://localhost:4000/api\"\n \nexport function sendActToDB(actdata) {\n    return (dispatch) => {\n    const url = `${API_URL}/acts/create`;\n        return axios.post(url, actdata)        \n        .then( (res) => {dispatch(sendActToDBSuccess(res))})\n        .catch( err => {dispatch(sendActToDBFailure(err))})\n    }\n    \n}\n\nexport function sendActToDBSuccess(actdata) {\n    return{\n        type:POST_ACT_SUCCESS,\n        payload: actdata\n    }\n}\n\nexport function sendActToDBFailure(error) {\n    return {\n        type: POST_ACT_FAILURE,\n        payload: error\n    }\n}","import axios from 'axios';\nimport { GET_ALL_POINTS_SUCCESS, GET_ALL_POINTS_FAILURE, GET_ALLACTS_SUCCESS, GET_ALLACTS_FAILURE, GET_ALLACTS_REQUEST } from './constants';\n\nconst API_URL = process.env.API_URL || \"http://localhost:4000/api\"\n\n\n\n\n\nexport function getAllPoints() {\n    return (dispatch) => {\n        return axios.get(`${API_URL}/admin/totalpoints`)\n        .then ((res) => { dispatch(getAllPointsSuccess(res)) })\n        .catch((err) => { dispatch(getAllPointsError(err)) })\n        \n    }\n}\n  \n export function getAllPointsSuccess(points) {\n    return {\n        type: GET_ALL_POINTS_SUCCESS,\n        payload: points\n    }\n}\n\n  export function getAllPointsError (error) {\n    return {\n        type: GET_ALL_POINTS_FAILURE,\n        payload: error\n    }\n}\n\nexport function getAllActs(){\n    return (dispatch) => {\n        dispatch({type: GET_ALLACTS_REQUEST})\n        return axios.get(`${API_URL}/acts`)\n        .then ((res) => { dispatch(getAllActsSuccess(res)) })\n        .catch((err) => { dispatch(getAllActsError(err)) })\n        \n    }\n}\n\nexport function getAllActsSuccess(allacts) {\n    return {\n        type: GET_ALLACTS_SUCCESS,\n        payload: allacts\n    }\n}\n\n  export function getAllActsError (error) {\n    return {\n        type: GET_ALLACTS_FAILURE,\n        payload: error\n    }\n}\n\n\n\n\n\n","export const LOGIN_ERROR = 'LOGIN_ERROR';\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n\nexport const GET_ERRORS = 'GET_ERRORS'\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\n\nexport const REGISTER_ERROR = 'REGISTER_ERROR';\nexport const REGISTER_REQUEST = 'REGISTER_REQUEST';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\n\nexport const RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';\nexport const RESET_PASSWORD_FAILURE = 'RESET_PASSWORD_FAILURE';\n\nexport const SET_NEW_PASSWORD_SUCCESS = 'SET_NEW_PASSWORD_SUCCESS';\nexport const SET_NEW_PASSWORD_FAILURE = 'SET_NEW_PASSWORD_FAILURE';\n\nexport const GET_ALL_POINTS_REQUEST = 'GET_ALL_POINTS_REQUEST';\nexport const GET_ALL_POINTS_SUCCESS = 'GET_ALL_POINTS_SUCCESS';\nexport const GET_ALL_POINTS_FAILURE = 'GET_ALL_POINTS_FAILURE';\n\n\nexport const POST_ACT_SUCCESS = 'POST_ACT_SUCCESS';\nexport const POST_ACT_FAILURE = 'POST_ACT_FAILURE';\n\nexport const GET_USERPOINTS_SUCCESS = 'GET_USERPOINTS_SUCCESS';\nexport const GET_USERPOINTS_FAILURE = 'GET_USERPOINTS_FAILURE';\n\nexport const GET_USERACTS_SUCCESS = 'GET_USERACTS_SUCCESS';\nexport const GET_USERACTS_FAILURE = 'GET_USERACTS_FAILURE';\n\nexport const GET_ALLACTS_REQUEST = 'GET_ALLACTS_REQUEST';\nexport const GET_ALLACTS_SUCCESS = 'GET_ALLACTS_SUCCESS';\nexport const GET_ALLACTS_FAILURE = 'GET_ALLACTS_FAILURE';\n\nexport const SET_WITNESS = 'SET_WITNESS';\nexport const SET_ENCOURAGEMENT = 'SET_ENCOURAGEMENT';\nexport const SET_KINDNESS = 'SET_KINDNESS';\n\nexport const ADD_TYPE_FILTER = 'ADD_TYPE_FILTER';\nexport const REMOVE_TYPE_FILTER = 'REMOVE_TYPE_FILTER';\n\n","import { RESET_PASSWORD_SUCCESS, \n        RESET_PASSWORD_FAILURE, \n        SET_NEW_PASSWORD_SUCCESS, \n        SET_NEW_PASSWORD_FAILURE} from './constants'\nimport axios from  'axios';\n\nconst API_URL = process.env.API_URL || \"http://localhost:4000/api\"\n\n\n\nexport function resetPassword(email) {\n    return (dispatch) => {\n        return axios.post(`${API_URL}/forgot`, email)\n        .then( (res) => { dispatch(resetPasswordSuccess(res))})\n        .catch((err) => {dispatch(resetPasswordFailure(err))})\n    }\n}\n\nexport function resetPasswordSuccess(email) {\n\n    return {\n        type: RESET_PASSWORD_SUCCESS,\n        payload: email\n    }\n}\n\nexport function resetPasswordFailure (error) {\n        \n    return {\n        type: RESET_PASSWORD_FAILURE,\n        payload: error.response.data\n    }\n}\n\nexport function setNewPassword(userData) {\n    return (dispatch) => {\n        return axios.post(`${API_URL}/reset`, userData)\n        .then( (res) => { dispatch(setNewPasswordSuccess(res))})\n        .catch((err) => {dispatch(setNewPasswordFailure(err))})\n    }\n}\n\nexport function setNewPasswordSuccess(userData) {\n    return {\n        type: SET_NEW_PASSWORD_SUCCESS,\n        payload: userData\n    }\n}\n\nexport function setNewPasswordFailure(err) {\n    return {\n        type: SET_NEW_PASSWORD_FAILURE,\n        payload: err.response.data\n    }\n}\n\n\n\n","\nimport { SET_CURRENT_USER, GET_ERRORS,  REGISTER_REQUEST, REGISTER_SUCCESS, LOGIN_SUCCESS, LOGIN_REQUEST } from './constants';\nimport setAuthToken from '../reduxUtils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport axios from 'axios';\n\nconst API_URL = process.env.API_URL || \"http://localhost:4000/api\"\n\n\n\nexport const registerUser = (user, history) => dispatch => {\n    dispatch({type: REGISTER_REQUEST})\n    return axios.post(`${API_URL}/signup`,user)\n    .then( \n        (res) => { \n        dispatch({type: REGISTER_SUCCESS})\n        history.push('/login')\n    })\n\n    .catch(err => {\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    })\n\n\n}\n\nexport const loginUser = (userInfo) => dispatch => {\n        dispatch({type: LOGIN_REQUEST}) \n        return axios.post(`${API_URL}/login`, userInfo)\n        .then( (res) => {dispatch(loginUserSuccess(res))})\n        .catch(err => { dispatch(loginUserError(err))})\n    \n}\n\nexport const  loginUserSuccess = (res) => dispatch => {\n    const token  = res.data.token;\n    localStorage.setItem('jwtToken', token);\n   \n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n    \n    return {   \n        type: LOGIN_SUCCESS,\n        payload: res\n    }\n}\n\nexport function loginUserError(err) {\n    return {\n        type: GET_ERRORS,\n        payload: err.response.data\n    }\n}\n\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    }\n}\n\nexport const logoutUser = (history) => dispatch => {\n    localStorage.removeItem('jwtToken');\n    setAuthToken(false);\n    localStorage.removeItem('user');\n    dispatch(setCurrentUser({}));\n    history.push('/login');\n}\n","import axios from 'axios';\nimport { GET_USERPOINTS_SUCCESS, \n         GET_USERPOINTS_FAILURE , \n         GET_USERACTS_SUCCESS, \n         GET_USERACTS_FAILURE,\n         ADD_TYPE_FILTER,\n         REMOVE_TYPE_FILTER\n\n} from './constants';\n\nconst API_URL = process.env.API_URL || \"http://localhost:4000/api\"\n\n\n\nexport function getUserPoints(id) {\n    return (dispatch) => {\n        return axios.get(`${API_URL}/acts/total/`+ id)\n        .then((res) => { dispatch(getPointsSuccess(res)) })\n        .catch( (err) => { dispatch(getPointsFailure(err))  })\n    }\n}\n\nexport function getPointsSuccess(userpoints) {\n    return {\n        type: GET_USERPOINTS_SUCCESS,\n        payload: userpoints\n    }\n}\n\nexport function getPointsFailure(err) {\n\n    return {\n        type: GET_USERPOINTS_FAILURE,\n        payload: err\n    }\n}\n////\nexport function getActList(id) {\n    return (dispatch) => {\n        return axios.get(`${API_URL}/acts/`+ id)\n        .then((res) => { dispatch(getActSuccess(res)) })\n        .catch( (err) => { dispatch(getActFailure(err))  })\n    }\n}\n\nexport function getActSuccess(useracts) {\n    return {\n        type: GET_USERACTS_SUCCESS,\n        payload: useracts\n    }\n}\n\nexport function getActFailure(err) {\n\n    return {\n        type: GET_USERACTS_FAILURE,\n        payload: err\n    }\n}\n\nexport function addFilterType(filterType) {\n        return {\n       type: ADD_TYPE_FILTER,\n       filterType\n    }\n   \n}\n\nexport function removeFilterType(filterType) {\n    return {\n        type: REMOVE_TYPE_FILTER,\n        filterType\n    }\n}\n","import { POST_ACT_SUCCESS, POST_ACT_FAILURE} from '../actions/constants'\n\nconst initialState = {};\n\nexport function actReducer (state = initialState, action) {\n\n    switch(action.type) {\n        case POST_ACT_SUCCESS:\n        return action.payload\n\n        case POST_ACT_FAILURE:\n        return action.payload\n        \n        default:\n        return state\n\n    }\n\n}","import { GET_ALL_POINTS_REQUEST, GET_ALL_POINTS_SUCCESS, GET_ALL_POINTS_FAILURE } from '../actions/constants';\n\n\nconst initialState = {\n    points: []\n}\n\nexport function appReducer  (state = initialState, action) {\n\n    switch(action.type) {\n        \n        \n        case GET_ALL_POINTS_REQUEST:\n        return action.payload;\n\n        case GET_ALL_POINTS_SUCCESS:\n            return   {\n                points: [action.payload.data]\n            }\n            \n\n        case GET_ALL_POINTS_FAILURE:\n             return action.payload;\n            \n        default:\n            return state;\n    }\n}\n\n\n","import { SET_CURRENT_USER } from '../actions/constants';\nimport isEmpty from '../../components/util/isEmpty';\n\nconst initialState = {\n    isAuthenticated: false,\n    user: {}\n}\n\nexport function authReducer (state = initialState, action ) {\n    switch(action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            }\n        default: \n            return state;\n    }\n}","import { GET_ALLACTS_SUCCESS, GET_ALLACTS_FAILURE, GET_ALLACTS_REQUEST} from '../actions/constants'\n\nconst inititalState = [];\n\nexport function churchListReducer (state = inititalState, action){\n\n    switch(action.type){\n\n        case GET_ALLACTS_REQUEST:\n        return {\n            ...state, \n            isLoading: true\n        }\n\n\n        case GET_ALLACTS_SUCCESS:\n        return {\n            churchlist: action.payload.data,\n            isLoading: false\n        }\n        \n        case GET_ALLACTS_FAILURE:\n        return {\n            ...state,\n            isLoading: false,\n            errorMessage: action.payload.message\n\n        }\n\n        default:\n        return state;\n    }\n}\n","import { GET_ERRORS, \n        LOGIN_REQUEST,\n        LOGIN_SUCCESS, \n        REGISTER_REQUEST, \n        REGISTER_SUCCESS, \n        } from '../actions/constants';\n\n\nconst initialState = {\n\n    isFetching: false,\n    loggingIn: false\n};\n\nexport function errorReducer (state = initialState, action ) {\n    switch(action.type) {\n        case GET_ERRORS:\n            return {\n                errors: action.payload,\n                loggingIn: false\n            };\n\n        case REGISTER_REQUEST:\n            return {\n                ...state,\n                isFetching: true\n            }\n        \n        case REGISTER_SUCCESS:\n            return {\n                ...state,\n                isFetching: false\n            }\n        \n        case LOGIN_REQUEST:\n                return {\n                ...state,\n                loggingIn: true\n                }\n                           \n        case LOGIN_SUCCESS:\n            return {\n                ...state,\n                loggingIn: false\n            }\n\n        default: \n            return state;\n    }\n}\n","import { RESET_PASSWORD_SUCCESS, \n         SET_NEW_PASSWORD_SUCCESS\n        } from '../actions/constants';\n\nconst initialState = {};\n\nexport function forgotReducer (state = initialState, action) {\n\n    switch(action.type) {\n        \n        case RESET_PASSWORD_SUCCESS:\n        return action.payload\n\n        case SET_NEW_PASSWORD_SUCCESS:\n        return action.payload\n\n        default: \n        return state\n    }\n\n}","import { RESET_PASSWORD_FAILURE, SET_NEW_PASSWORD_FAILURE} from '../actions/constants';\n \n\nconst initialState = {\n    isFetching: false,\n}\n\nexport function loginReducer  (state = initialState, action) {\n\n    switch(action.type) {\n              \n        case RESET_PASSWORD_FAILURE:\n                return action.payload\n\n        case SET_NEW_PASSWORD_FAILURE:\n\n        return action.payload\n            \n        default:\n            return state;\n    }\n}\n\n\n","import { combineReducers } from \"redux\";\nimport { loginReducer } from './loginReducer';\nimport { authReducer } from './authReducer';\nimport { appReducer } from './appReducer';\nimport { actReducer } from './actReducer';\nimport { userdashReducer } from './userdashReducer';\nimport { userListReducer } from './userlistReducer';\nimport { churchListReducer } from './churchlistReducer';\nimport { visibilityReducer } from './visibilityReducer'\nimport { forgotReducer } from './forgotReducer'\nimport { errorReducer} from './errorReducer';\n\nconst rootReducer = combineReducers({\n    errors: errorReducer,\n    login: loginReducer,\n    auth :authReducer,\n    app: appReducer,\n    act: actReducer,\n    userdash: userdashReducer,\n    userlist: userListReducer,\n    churchlist: churchListReducer,\n    visableFilter: visibilityReducer,\n    forgot: forgotReducer\n})\n\nexport default rootReducer;","import {GET_USERPOINTS_SUCCESS, GET_USERPOINTS_FAILURE } from '../actions/constants'\n\nconst initialstate = {\n    userpoints: []\n};\n\nexport function userdashReducer (state = initialstate, action){\n\n    switch(action.type){\n\n        case GET_USERPOINTS_SUCCESS:\n        return {\n            userpoints: [action.payload.data]\n        }\n        \n        case GET_USERPOINTS_FAILURE:\n        return action.payload\n\n        default:\n        return state;\n    }\n}","import {GET_USERACTS_SUCCESS, GET_USERACTS_FAILURE} from '../actions/constants'\n\nconst initialstate = {\n\n\n};\n\nexport function userListReducer (state = initialstate, action){\n\n\n    switch(action.type){\n\n        case GET_USERACTS_SUCCESS:\n        return {\n            userlist: action.payload.data\n        }\n        \n        case GET_USERACTS_FAILURE:\n        return action.payload\n\n\n        default:\n        return state;\n    }\n}","import {ADD_TYPE_FILTER, REMOVE_TYPE_FILTER} from '../actions/constants'\n\nconst initialstate = {\n\n    typeFilter: []\n\n};\n\nexport function visibilityReducer (state = initialstate, action){\n\n    switch(action.type){\n        \n        case ADD_TYPE_FILTER:        \n        return Object.assign( {}, state, {\n            typeFilter: [...state.typeFilter, action.filterType]\n        })\n            \n        case REMOVE_TYPE_FILTER:\n        const newTypeFilter = state.typeFilter.filter((item) => \n            item !==action.filterType)\n        \n        return { \n            typeFilter: newTypeFilter \n        }\n\n        default:\n        return state;\n    }\n}","import axios from 'axios';\n\nconst setAuthToken = token => {\n    if(token) {\n        axios.defaults.headers.common['Authorization'] = token;\n    }\n    else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n}\n\nexport default setAuthToken;"],"mappingstJA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAcA;AACA;AADA;AAGA;AACA;AAlBA;AAoBA;AAAA;AAAA;AACA;AACA;AAtBA;AAyBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AA7BA;AAmCA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AA/CA;AAiDA;AACA;AAEA;AACA;AACA;AAtDA;AAwDA;AACA;AACA;AAIA;AACA;AAAA;AAKA;AACA;AACA;AAnEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAkBA;AACA;AAAA;AAAA;AACA;AACA;AAsCA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAKA;AAEA;AAOA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAGA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AANA;AAaA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAWA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAQA;AACA;AAlJA;AACA;AAoJA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;AC9KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AADA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AA7CA;AACA;AA+CA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAJA;AACA;AAHA;AAYA;AAAA;AAAA;AACA;AACA;AAdA;AAiBA;AACA;AACA;AADA;AAGA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AAjCA;AACA;AAkCA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAPA;AASA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAQA;AACA;AAvFA;AACA;AAwFA;AACA;AACA;AAFA;AACA;AAIA;AAGA;AACA;AAHA;AACA;AAMA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAJA;AACA;AAHA;AAYA;AAAA;AAAA;AACA;AACA;AAdA;AAgBA;AAAA;AAAA;AACA;AACA;AAlBA;AAoBA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AA7BA;AACA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAOA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAKA;AAAA;AAQA;AACA;AA7GA;AACA;AA8GA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AACA;AAHA;AAeA;AAAA;AAAA;AACA;AACA;AAjBA;AAoBA;AAAA;AAAA;AACA;AACA;AAtBA;AAyBA;AAAA;AAAA;AACA;AACA;AA3BA;AA8BA;AAAA;AAAA;AACA;AACA;AAhCA;AAkCA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AA3CA;AACA;AA4CA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAQA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AAUA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AASA;AACA;AA9IA;AACA;AA+IA;AACA;AADA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAKA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAHA;AAYA;AAAA;AAAA;AACA;AACA;AAdA;AAgBA;AAAA;AAAA;AACA;AACA;AAlBA;AAoBA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AA/BA;AAiCA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AAzCA;AACA;AA0CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AAAA;AAMA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AADA;AAJA;AAQA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAOA;AACA;AAtIA;AACA;AAuIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAgBA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAzBA;AA2BA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AApCA;AAsCA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AA9CA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAmCA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAQA;AACA;AAjGA;AACA;AAmGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;;;;;;;;;;;;AChIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AAOA;AACA;AAnBA;AACA;AAsBA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AAVA;AACA;AAaA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AACA;AArBA;AACA;AAoBA;AAEA;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAHA;AACA;AAHA;AA6BA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAhDA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAGA;AACA;AAlEA;AACA;AAmEA;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;;;;;;;;AChDA;AAAA;AACA;AAMA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AAGA;AAAA;AAMA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AASA;AACA;AAvCA;AACA;AAyCA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;AC5DA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA,aAEA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAFA;AAIA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAYA;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AAhBA;AAkBA;;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AARA;AAUA;;;;;;;;;;;;;;;;;;;ACnBA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAFA;AACA;AAKA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAEA;AACA;AAHA;AACA;AAMA;AACA;AAxBA;AA0BA;;;;;;;;;;;;;;;;;;;AChCA;AAQA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAhCA;AAkCA;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAVA;AAYA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAIA;AAEA;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AAXA;AAaA;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAEA;AAKA;AAGA;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAZA;AAcA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAEA;AAEA;AAFA;AAMA;AAEA;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AAhBA;AAkBA;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}